<?php
namespace app\commands;

use app\models\RespondentSurvey;
use yii\console\Controller;
use yii\db\Connection;

/**
 * Class UtilController
 * @package app\commands
 */
class UtilController extends Controller
{
    /** @var Connection */
    protected $db;

    /**
     * {@inheritDoc}
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub

        $this->db = \Yii::$app->db;
    }

    /**
     * Updates RespondentSurvey bid
     */
    public function actionUpdateBid()
    {
        $time = $this->beginCommand('Gets identifiers');
        $ids = $this->getRespondentSurveyIds();
        $this->endCommand($time, count($ids) . ' records to process');

        $tran = null;

        foreach ($ids as $_i => $id) {
            if ($_i % 10000 === 0) {
                $time = $this->beginCommand('Bulk processing');
                $tran = $this->db->beginTransaction();
            }

            $rs = RespondentSurvey::findOne($id);
            $rs->bid = floatval(str_replace(',', '.', $rs->getUriParam('bd'))) ?: 0;
            $this->db->createCommand()->update('respondent_survey', ['bid' => $rs->bid], 'id = ' . $rs->id)->execute();

            if ($_i % 10000 === 9999) {
                $tran->commit();
                $this->endCommand($time);
                $tran = null;
            }
        }

        if ($tran) {
            $tran->commit();
            $this->endCommand($time);
        }
    }

    /**
     * @return array
     * @throws \yii\db\Exception
     */
    protected function getRespondentSurveyIds()
    {
        $query = "select id from respondent_survey where bid = 0 and uri like '%bd=%'";
        return $this->db->createCommand($query)->queryColumn();
    }

    /**
     * Prepares for a command to be executed, and outputs to the console.
     *
     * @param string $description the description for the command, to be output to the console.
     * @return float the time before the command is executed, for the time elapsed to be calculated.
     */
    protected function beginCommand($description)
    {
        echo "    > $description ...";
        return microtime(true);
    }

    /**
     * Finalizes after the command has been executed, and outputs to the console the time elapsed.
     *
     * @param float $time the time before the command was executed.
     */
    protected function endCommand($time, $note = 'done')
    {
        $note = $note ?: 'done';

        echo ' ' . $note . ' (time: ' . sprintf('%.3f', microtime(true) - $time) . "s)\n";
    }
}